climbTheHill(pCurr, precision):
	
	# pick starting p
	
	# set starting diff (make it coarse to start - maybe 0.1)	
	
	# Let's keep trying to find a better solution until our diff is sufficiently small
	# (less than some value we're calling "precision").
	while (diff > precision):
		
		# Figure out if likelihoods are bigger to the R or L to start.
		# You'll need a likelihood function [e.g., like()] already defined. You can use
		# the binomial pmf.
		pCurrLike =				# starting like
		pRightLike =			# like to the right
		pLeftLike =				# like to the left
		
		# Keep going to the right if that's moving us uphill
		# To the right, to the right, to the right, to the right
		while (pRightLike > pCurrLike):
		
			# Move pCurr to the right by diff
		
			# Reset likelihoods for PCurr, PRright, and PLeft
	
		# Keep going to the left if that's moving us uphill
		# To the left, to the left, to the left, to the left
		while (pLLike > pCurrLike):
			
			# Move pCurr to the left by diff
			
			# Reset likelihoods for PCurr, PRright, and PLeft
		
		# Ok, we've exhausted what we can do with this diff. Make it smaller here. 
		# I recommend reducing it by 1/2, but you can experiment with this.
	
	return pCurr